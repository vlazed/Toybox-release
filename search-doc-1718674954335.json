[{"title":"Chat Voice Navigation","type":0,"sectionRef":"#","url":"/Pickles-Toybox/docs/tutorial-chat/navigation","content":"Chat Voice Navigation Chat voice keywords, sound ids, and callbacks are found in src/shared/Assets/Audio/Chat Luau Files In init.luau, note the following: type Audios = { Quotes: ChatAudioPack, Deaths: ChatAudioPack, ... } These reflect the existing audio pack files under the Chat folder (respectively the Quotes.luau and Deaths.luau files). The user can add more .luau audio packs provided that they fill the type table above with the new packs. To properly add a new chat audio pack, see the next section.","keywords":""},{"title":"Dialogue Navigation","type":0,"sectionRef":"#","url":"/Pickles-Toybox/docs/tutorial-commu/navigation","content":"Dialogue Navigation Dialogue text are found in src/shared/Commu/ Text Files All dialogue text are written in Inkle. Although the file extensions are .txt, Rink can recognize the ink structure. Ink dialogue files can be placed anywhere. For consistency, we recommend placing them in the src/shared/Commu folder To write new dialogue, go to the next section.","keywords":""},{"title":"Playing Ink Files","type":0,"sectionRef":"#","url":"/Pickles-Toybox/docs/tutorial-commu/playing-ink-files","content":"Playing Ink Files React controls the dialogue presentation and parses tags found on each line. To see your own dialogue, first navigate to src/shared/Commu/CommuLocations.luau. These are a list of locations which React will search for Models or Parts with the Commu attribute. React recognizes Commu attributes and places a billboard over them, which the player can click on to view the dialogue. To actually see the dialogue, the Commu attribute is a string property which points to an ink dialogue StringValue in the Roblox game. For instance, the Commu attribute may point to the following string value: /ReplicatedStorage/Common/Commu/TheArtConvention/FlyLotusy In the codebase, the above translates to src/shared/Commu/TheArtConvention/FlyLotusy.txt. For your model or part, simply add a Commu string attribute which points to a StringValue with the appropriate ink dialogue If everything works out, you should be able to see a text bubble above the part. It is imperative to test ink dialogue vigilantly to ensure that it meets its expectations and requirements","keywords":""},{"title":"Data Structure","type":0,"sectionRef":"#","url":"/Pickles-Toybox/docs/tutorial-chat/data-structure","content":"Data Structure The chat audio pack may have the following structure: { [{ &quot;oonoospoo&quot;, &quot;ooooooooo&quot; }] = { id = ##, callback = function(character) end, }, [&quot;ohhhhhhh&quot;] = { id = ##, callback = function(character) end, }, ... } The structure has these properties: The id is the sound idThe callback is a function which generally takes the chatter's character, and any other arguments after it The chat controller permits a string or a table of strings for its keys. These represent the keywords that a player can say. Note that for a table of strings, a player can say the keywords in the table. These result in the same sound id and callback.","keywords":""},{"title":"Adding new sounds","type":0,"sectionRef":"#","url":"/Pickles-Toybox/docs/tutorial-deaths/adding-death-sounds","content":"Adding new sounds New death sounds can be added without much thought. In the respective files, simply append the sound id that you would like to play for each character tag. You can make sounds play more often by adding more of the same sound id.","keywords":""},{"title":"Death Sound Navigation","type":0,"sectionRef":"#","url":"/Pickles-Toybox/docs/tutorial-deaths/navigation","content":"Death Sound Navigation Death sounds are found in src/shared/Assets/Audio/Deaths. To add new death sounds, go to the next section.","keywords":""},{"title":"Intro","type":0,"sectionRef":"#","url":"/Pickles-Toybox/docs/intro","content":"Intro The codebase of Pickle's Toybox received a massive overhaul. A summary of the Toybox codebase: Much of it is tag component-based. This allows reusable behavior for many entities which share the same tagThe codebase adopts a pattern similar to the model-view-controller The controllers manipulate the behavior of the model. The services pass around data between controllers and componentsReact manipulates the view, otherwise known as the UI. The model is the Roblox environment. The code is much more data-driven. Packets pass around messages, VFX, or fighter dataMany assets are held by their ids rather than in rbxmx filesThe MVC design pattern reads this data and produces behaviors. Designers can generate new fighter animations, gallery images, and dialogue The next few sections are a tutorial for designers which detail how to work with the codebase of Pickle's Toybox. This includes adding new images to the art gallery, adding new chat prompts, adding new death sounds, or adding new dialogue.","keywords":""},{"title":"Writing Ink Files","type":0,"sectionRef":"#","url":"/Pickles-Toybox/docs/tutorial-commu/writing-ink-files","content":"Writing Ink Files Rink is a wrapper around a pure Lua ink parser, pink. Rink reads ink files, which are .txt files, from StringValues, where the Value contains the ink text file contents The pink parser is still in-development. The following features are supported: KnotsChoicesVariables (Variables from outside ink are not set until after choice selection)Shuffles We recommend following this guide to understand how to write ink files. The following is a template ink file to use for writing ink dialogue for the Toybox. We stress the following styles: All ink files after file tags and variables must start with -&gt; start, followed by the knot === start ===. Close all knots with -&gt; END VAR player_name = &quot;NO_NAME&quot; -&gt; start === start === Hello... # speak Creepy them This is fallback dialogue. # dummy -&gt; choices === choices === * [Uh oh] -&gt; conclusion * [2] SPOOKY 4 ME -&gt; conclusion === conclusion === If you see this dialogue, please let the developer know. # start Goodbye {player_name} # speak 0 them -&gt; END ","keywords":""},{"title":"Attack Animations","type":0,"sectionRef":"#","url":"/Pickles-Toybox/docs/tutorial-fighter/attack-animations","content":"","keywords":""},{"title":"Attack Structure​","type":1,"pageTitle":"Attack Animations","url":"/Pickles-Toybox/docs/tutorial-fighter/attack-animations#attack-structure","content":"After converting an attack animation to a smart animation, we must add markers to the attack animation. The Fighter class looks for these markers in order to start running hitboxes, VFX, and SFX. The following are important: Count is a marker denoting the number of attacks in an animation. For example, if an attack is a spinning kick animation, then the number of kicks from the animation should be the number of attacks.Start starts the attack hitbox. It must have either of the following parameters: RightPunchLeftPunchRightKickLeftKickGrabTrip End ends the attack hitbox. It has the same parameters as Start Other parameters can be used; these cause some events to occur: Land causes a landing sound to play. The name of the fighter must be the parameter.Throw causes a throwing sound to play. The name of the fighter must be the parameter.Grab causes a grabbing sound to play. The name of the fighter must be the parameter.Damage damages the entity playing the animationPosition sets the position of the entity. Generally placed at the end of an animation. "},{"title":"Combos","type":0,"sectionRef":"#","url":"/Pickles-Toybox/docs/tutorial-fighter/combos","content":"Combos Combos are special attack animations which play when certain input sequences are met. Combos have the following data structure: { [&quot;12&quot;] = { Id = ##, Damage = ## }, ... } The Id is the attack animation id which will play. Damage is the amount of damage dealt when this attack animation plays.","keywords":""},{"title":"Data Structure","type":0,"sectionRef":"#","url":"/Pickles-Toybox/docs/tutorial-gallery/data-structure","content":"Data Structure A gallery image has the following structure: { id = 4783982700, title = &quot;Mother Vacation&quot;, author = &quot;PickleThingy&quot;, desc = &quot;my favorite vacation getaway is the Island of Kongo Bongo&quot;, tags = makeTags({ &quot;PickleThingy&quot;, &quot;UCH&quot;, &quot;Ultimate Chimera Hunt&quot;, &quot;Pig&quot;, &quot;Pigmask&quot; }), }, The structure has the following properties: The id is the image id. The image id can be extracted from a decal.The following features are shown on the modal: The title is the name of the art piece.The author is the person who made the art.The desc describes the art. The tags informally categorizes the art pieces and helps users find certain art pieces based on its features To generate a new art piece, simply make a new dictionary with the above properties.","keywords":""},{"title":"Fighter Navigation","type":0,"sectionRef":"#","url":"/Pickles-Toybox/docs/tutorial-fighter/navigation","content":"Fighter Navigation Fighting styles are found in src/shared/Entity/Fighter/Styles To add new fighter styles, go to the next section.","keywords":""},{"title":"Style Data Structure","type":0,"sectionRef":"#","url":"/Pickles-Toybox/docs/tutorial-fighter/data-structure","content":"","keywords":""},{"title":"Fighter Stats​","type":1,"pageTitle":"Style Data Structure","url":"/Pickles-Toybox/docs/tutorial-fighter/data-structure#fighter-stats","content":"The fighter stats has the following data structure (taken from Brawler with damage values hashed tag) { DamageSet = { RightPunch = ##, LeftPunch = ##, RightKick = ##, LeftKick = ##, Trip = ##, ThrowForward = ##, ThrowBackward = ##, }, AttackLimbs = { RightPunch = &quot;Right Arm&quot;, LeftPunch = &quot;Left Arm&quot;, RightKick = &quot;Right Leg&quot;, LeftKick = &quot;Left Leg&quot;, Trip = &quot;Right Leg&quot;, Grab = &quot;Right Arm&quot;, }, AttackLimbType = { RightPunch = &quot;General&quot;, LeftPunch = &quot;General&quot;, RightKick = &quot;General&quot;, LeftKick = &quot;General&quot;, Trip = &quot;General&quot;, Grab = &quot;General&quot;, }, BlockHealRate = ##, -- health per second ParryWindow = ##, BlockCooldownWindow = ##, Combos = require(script.Combos), }  We will get to combos later. Notice that each key in the fighter stats generally have the same dictionary with the following keys: { RightPunch: T, LeftPunch: T, RightKick: T, LeftKick: T, Trip: T, ThrowForwad: T, ThrowBackward: T }  T denotes the type that the values of these keys may take on For DamageSet, T is a number, and it represents how much damage each of these attacks may deal For AttackLimbs, T is a string which names the limb that these attacks will useFor AttackLimbType, T is a string which names the material of these limbs. Different materials produce different sounds The other stats are listed below: BlockHealRate is the amount of health per second when not in the blocking stateParryWindow is the time in seconds which a player can parry an attack. We recommend a tiny window for parryingBlockCooldownWindow is the time in seconds which a player cannot return to the blocking state after exiting from it. This prevents attempts to spam parryingCombos is a table where the keys are the inputs required to execute the combo, and the value is a table with the animation id and the damage dealt. "},{"title":"Fighter Tracks​","type":1,"pageTitle":"Style Data Structure","url":"/Pickles-Toybox/docs/tutorial-fighter/data-structure#fighter-tracks","content":"The fighter tracks has the following data structure (taken from Brawler) { LocomotionSet = { WalkForward = getPositionData(##, -multiplier * Vector2.yAxis), WalkBackward = getPositionData(##, multiplier * Vector2.yAxis), WalkRight = getPositionData(##, multiplier * Vector2.xAxis), WalkLeft = getPositionData(##, -multiplier * Vector2.xAxis), Idle = getPositionData(##, multiplier * Vector2.zero), }, AttackTrackSet = { RightPunch = ##, LeftPunch = ##, RightKick = ##, LeftKick = ##, Trip = ##, Grab = ##, ThrowForward = ##, ThrowBackward = ##, }, FlinchTrackSet = { RightPunch = ##, LeftPunch = ##, RightKick = ##, LeftKick = ##, Trip = ##, Grab = ##, ThrowForward = ##, ThrowBackward = ##, }, Block = ##, Parry = ##, }  Every number in the fighter tracks is an animation id. AttackTrackSet and FlinchTrackSet are the animation ids for the respective attacks and flinches. These tracks complement each other: for example, a right punch to the face should produce a flinch which the head is thrown back. LocomotionSet denotes the different animations to play when a player walks in a direction relative to the camera (in other words, when shift-locked). The second argument in getPositionData is a point in an animation blendspace, which the DirectionalMovement class uses to blend between the different animations. When making a locomotion for a fighter, make sure that every animation has the same pace. "},{"title":"Gallery Navigation","type":0,"sectionRef":"#","url":"/Pickles-Toybox/docs/tutorial-gallery/navigation","content":"Gallery Navigation Gallery images are found in src/client/UI/Pages/Gallery/GalleryImages","keywords":""}]